// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#ifndef PROTOBUF_system_2eproto__INCLUDED
#define PROTOBUF_system_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_system_2eproto();
void protobuf_AssignDesc_system_2eproto();
void protobuf_ShutdownFile_system_2eproto();

class CommonResponse;
class RegisterRequest;
class RegisterResponse;
class StatusRequest;
class StatusResponse;
class ConfigData;
class ConfigDataRequest;
class ConfigDataResponse;
class BroadcastNotify;
class VoteData;
class VoteResponse;
class PushQueueRequest;
class PopQueueRequest;
class SyncQueueRequest;
class SyncQueueData;
class ForwardData;

enum SystemMessageType {
  SYSTEM_BASE = 256,
  REGISTER_REQUEST = 257,
  REGISTER_RESPONSE = 258,
  STATUS_REQUEST = 259,
  STATUS_RESPONSE = 260,
  CONFIG_DATA_REQUEST = 261,
  CONFIG_DATA_RESPONSE = 262,
  HTTP_REQUEST = 263,
  VOTE_REQUEST = 265,
  VOTE_RESPONSE = 266,
  VOTE_NOTIFY = 267,
  PUSH_QUEUE_REQUEST = 269,
  PUSH_QUEUE_RESPONSE = 270,
  POP_QUEUE_REQUEST = 271,
  POP_QUEUE_RESPONSE = 272,
  SYNC_QUEUE_REQUEST = 273,
  SYNC_QUEUE_RESPONSE = 274,
  FORWARD_REQUEST = 277,
  FORWARD_RESPONSE = 278,
  BROADCAST_NOTIFY = 500
};
bool SystemMessageType_IsValid(int value);
const SystemMessageType SystemMessageType_MIN = SYSTEM_BASE;
const SystemMessageType SystemMessageType_MAX = BROADCAST_NOTIFY;
const int SystemMessageType_ARRAYSIZE = SystemMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemMessageType_descriptor();
inline const ::std::string& SystemMessageType_Name(SystemMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemMessageType_descriptor(), value);
}
inline bool SystemMessageType_Parse(
    const ::std::string& name, SystemMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemMessageType>(
    SystemMessageType_descriptor(), name, value);
}
enum SystemErrorType {
  EC_SUCCESS = 0,
  EC_VOTE_FAILED = 257,
  EC_VOTE_LEADER_EXIST = 258
};
bool SystemErrorType_IsValid(int value);
const SystemErrorType SystemErrorType_MIN = EC_SUCCESS;
const SystemErrorType SystemErrorType_MAX = EC_VOTE_LEADER_EXIST;
const int SystemErrorType_ARRAYSIZE = SystemErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemErrorType_descriptor();
inline const ::std::string& SystemErrorType_Name(SystemErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemErrorType_descriptor(), value);
}
inline bool SystemErrorType_Parse(
    const ::std::string& name, SystemErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemErrorType>(
    SystemErrorType_descriptor(), name, value);
}
// ===================================================================

class CommonResponse : public ::google::protobuf::Message {
 public:
  CommonResponse();
  virtual ~CommonResponse();
  
  CommonResponse(const CommonResponse& from);
  
  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonResponse& default_instance();
  
  void Swap(CommonResponse* other);
  
  // implements Message ----------------------------------------------
  
  CommonResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 error_code = 1 [default = 0];
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CommonResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_code_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CommonResponse* default_instance_;
};
// -------------------------------------------------------------------

class RegisterRequest : public ::google::protobuf::Message {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();
  
  RegisterRequest(const RegisterRequest& from);
  
  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRequest& default_instance();
  
  void Swap(RegisterRequest* other);
  
  // implements Message ----------------------------------------------
  
  RegisterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 node_type = 1 [default = 0];
  inline bool has_node_type() const;
  inline void clear_node_type();
  static const int kNodeTypeFieldNumber = 1;
  inline ::google::protobuf::int32 node_type() const;
  inline void set_node_type(::google::protobuf::int32 value);
  
  // required int32 node_id = 2 [default = 0];
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RegisterRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 node_type_;
  ::google::protobuf::int32 node_id_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegisterResponse : public ::google::protobuf::Message {
 public:
  RegisterResponse();
  virtual ~RegisterResponse();
  
  RegisterResponse(const RegisterResponse& from);
  
  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterResponse& default_instance();
  
  void Swap(RegisterResponse* other);
  
  // implements Message ----------------------------------------------
  
  RegisterResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1 [default = 0];
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RegisterResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_code_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RegisterResponse* default_instance_;
};
// -------------------------------------------------------------------

class StatusRequest : public ::google::protobuf::Message {
 public:
  StatusRequest();
  virtual ~StatusRequest();
  
  StatusRequest(const StatusRequest& from);
  
  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusRequest& default_instance();
  
  void Swap(StatusRequest* other);
  
  // implements Message ----------------------------------------------
  
  StatusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:StatusRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class StatusResponse : public ::google::protobuf::Message {
 public:
  StatusResponse();
  virtual ~StatusResponse();
  
  StatusResponse(const StatusResponse& from);
  
  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusResponse& default_instance();
  
  void Swap(StatusResponse* other);
  
  // implements Message ----------------------------------------------
  
  StatusResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:StatusResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class ConfigData : public ::google::protobuf::Message {
 public:
  ConfigData();
  virtual ~ConfigData();
  
  ConfigData(const ConfigData& from);
  
  inline ConfigData& operator=(const ConfigData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigData& default_instance();
  
  void Swap(ConfigData* other);
  
  // implements Message ----------------------------------------------
  
  ConfigData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigData& from);
  void MergeFrom(const ConfigData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 node_type = 1;
  inline bool has_node_type() const;
  inline void clear_node_type();
  static const int kNodeTypeFieldNumber = 1;
  inline ::google::protobuf::int32 node_type() const;
  inline void set_node_type(::google::protobuf::int32 value);
  
  // optional int32 protect_mode = 4 [default = 0];
  inline bool has_protect_mode() const;
  inline void clear_protect_mode();
  static const int kProtectModeFieldNumber = 4;
  inline ::google::protobuf::int32 protect_mode() const;
  inline void set_protect_mode(::google::protobuf::int32 value);
  
  // required string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  
  // repeated int32 online_node_list = 3;
  inline int online_node_list_size() const;
  inline void clear_online_node_list();
  static const int kOnlineNodeListFieldNumber = 3;
  inline ::google::protobuf::int32 online_node_list(int index) const;
  inline void set_online_node_list(int index, ::google::protobuf::int32 value);
  inline void add_online_node_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      online_node_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_online_node_list();
  
  // @@protoc_insertion_point(class_scope:ConfigData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 node_type_;
  ::google::protobuf::int32 protect_mode_;
  ::std::string* data_;
  static const ::std::string _default_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > online_node_list_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ConfigData* default_instance_;
};
// -------------------------------------------------------------------

class ConfigDataRequest : public ::google::protobuf::Message {
 public:
  ConfigDataRequest();
  virtual ~ConfigDataRequest();
  
  ConfigDataRequest(const ConfigDataRequest& from);
  
  inline ConfigDataRequest& operator=(const ConfigDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDataRequest& default_instance();
  
  void Swap(ConfigDataRequest* other);
  
  // implements Message ----------------------------------------------
  
  ConfigDataRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigDataRequest& from);
  void MergeFrom(const ConfigDataRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 node_type_list = 1;
  inline int node_type_list_size() const;
  inline void clear_node_type_list();
  static const int kNodeTypeListFieldNumber = 1;
  inline ::google::protobuf::int32 node_type_list(int index) const;
  inline void set_node_type_list(int index, ::google::protobuf::int32 value);
  inline void add_node_type_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      node_type_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_node_type_list();
  
  // @@protoc_insertion_point(class_scope:ConfigDataRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > node_type_list_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ConfigDataRequest* default_instance_;
};
// -------------------------------------------------------------------

class ConfigDataResponse : public ::google::protobuf::Message {
 public:
  ConfigDataResponse();
  virtual ~ConfigDataResponse();
  
  ConfigDataResponse(const ConfigDataResponse& from);
  
  inline ConfigDataResponse& operator=(const ConfigDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigDataResponse& default_instance();
  
  void Swap(ConfigDataResponse* other);
  
  // implements Message ----------------------------------------------
  
  ConfigDataResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigDataResponse& from);
  void MergeFrom(const ConfigDataResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1 [default = 0];
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // repeated .ConfigData data_list = 3;
  inline int data_list_size() const;
  inline void clear_data_list();
  static const int kDataListFieldNumber = 3;
  inline const ::ConfigData& data_list(int index) const;
  inline ::ConfigData* mutable_data_list(int index);
  inline ::ConfigData* add_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigData >&
      data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigData >*
      mutable_data_list();
  
  // @@protoc_insertion_point(class_scope:ConfigDataResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::RepeatedPtrField< ::ConfigData > data_list_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ConfigDataResponse* default_instance_;
};
// -------------------------------------------------------------------

class BroadcastNotify : public ::google::protobuf::Message {
 public:
  BroadcastNotify();
  virtual ~BroadcastNotify();
  
  BroadcastNotify(const BroadcastNotify& from);
  
  inline BroadcastNotify& operator=(const BroadcastNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastNotify& default_instance();
  
  void Swap(BroadcastNotify* other);
  
  // implements Message ----------------------------------------------
  
  BroadcastNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadcastNotify& from);
  void MergeFrom(const BroadcastNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 uid_list = 1;
  inline int uid_list_size() const;
  inline void clear_uid_list();
  static const int kUidListFieldNumber = 1;
  inline ::google::protobuf::int32 uid_list(int index) const;
  inline void set_uid_list(int index, ::google::protobuf::int32 value);
  inline void add_uid_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      uid_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_uid_list();
  
  // optional int32 msg_type = 2 [default = 0];
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  inline ::google::protobuf::int32 msg_type() const;
  inline void set_msg_type(::google::protobuf::int32 value);
  
  // required bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  
  // @@protoc_insertion_point(class_scope:BroadcastNotify)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > uid_list_;
  ::google::protobuf::int32 msg_type_;
  ::std::string* data_;
  static const ::std::string _default_data_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BroadcastNotify* default_instance_;
};
// -------------------------------------------------------------------

class VoteData : public ::google::protobuf::Message {
 public:
  VoteData();
  virtual ~VoteData();
  
  VoteData(const VoteData& from);
  
  inline VoteData& operator=(const VoteData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteData& default_instance();
  
  void Swap(VoteData* other);
  
  // implements Message ----------------------------------------------
  
  VoteData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteData& from);
  void MergeFrom(const VoteData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 vote_id = 1 [default = 0];
  inline bool has_vote_id() const;
  inline void clear_vote_id();
  static const int kVoteIdFieldNumber = 1;
  inline ::google::protobuf::int32 vote_id() const;
  inline void set_vote_id(::google::protobuf::int32 value);
  
  // optional int32 node_id = 2 [default = 0];
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);
  
  // optional int64 trans_id = 3 [default = 0];
  inline bool has_trans_id() const;
  inline void clear_trans_id();
  static const int kTransIdFieldNumber = 3;
  inline ::google::protobuf::int64 trans_id() const;
  inline void set_trans_id(::google::protobuf::int64 value);
  
  // optional int32 port = 4 [default = 0];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // optional string host = 5 [default = ""];
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 5;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  
  // @@protoc_insertion_point(class_scope:VoteData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 vote_id_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int64 trans_id_;
  ::google::protobuf::int32 port_;
  ::std::string* host_;
  static const ::std::string _default_host_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VoteData* default_instance_;
};
// -------------------------------------------------------------------

class VoteResponse : public ::google::protobuf::Message {
 public:
  VoteResponse();
  virtual ~VoteResponse();
  
  VoteResponse(const VoteResponse& from);
  
  inline VoteResponse& operator=(const VoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResponse& default_instance();
  
  void Swap(VoteResponse* other);
  
  // implements Message ----------------------------------------------
  
  VoteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteResponse& from);
  void MergeFrom(const VoteResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1 [default = 0];
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional .VoteData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::VoteData& data() const;
  inline ::VoteData* mutable_data();
  
  // @@protoc_insertion_point(class_scope:VoteResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 error_code_;
  ::VoteData* data_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VoteResponse* default_instance_;
};
// -------------------------------------------------------------------

class PushQueueRequest : public ::google::protobuf::Message {
 public:
  PushQueueRequest();
  virtual ~PushQueueRequest();
  
  PushQueueRequest(const PushQueueRequest& from);
  
  inline PushQueueRequest& operator=(const PushQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushQueueRequest& default_instance();
  
  void Swap(PushQueueRequest* other);
  
  // implements Message ----------------------------------------------
  
  PushQueueRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushQueueRequest& from);
  void MergeFrom(const PushQueueRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 trans_id = 1;
  inline bool has_trans_id() const;
  inline void clear_trans_id();
  static const int kTransIdFieldNumber = 1;
  inline ::google::protobuf::int64 trans_id() const;
  inline void set_trans_id(::google::protobuf::int64 value);
  
  // required string queue = 2;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 2;
  inline const ::std::string& queue() const;
  inline void set_queue(const ::std::string& value);
  inline void set_queue(const char* value);
  inline void set_queue(const char* value, size_t size);
  inline ::std::string* mutable_queue();
  
  // required int32 message_id = 3;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 3;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);
  
  // optional int32 delay = 4 [default = 0];
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 4;
  inline ::google::protobuf::int32 delay() const;
  inline void set_delay(::google::protobuf::int32 value);
  
  // optional int32 ttl = 5 [default = 0];
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 5;
  inline ::google::protobuf::int32 ttl() const;
  inline void set_ttl(::google::protobuf::int32 value);
  
  // optional int32 retry = 6 [default = 0];
  inline bool has_retry() const;
  inline void clear_retry();
  static const int kRetryFieldNumber = 6;
  inline ::google::protobuf::int32 retry() const;
  inline void set_retry(::google::protobuf::int32 value);
  
  // optional int32 max_count = 7 [default = 0];
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 7;
  inline ::google::protobuf::int32 max_count() const;
  inline void set_max_count(::google::protobuf::int32 value);
  
  // required bytes data = 8;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  
  // @@protoc_insertion_point(class_scope:PushQueueRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 trans_id_;
  ::std::string* queue_;
  static const ::std::string _default_queue_;
  ::google::protobuf::int32 message_id_;
  ::google::protobuf::int32 delay_;
  ::google::protobuf::int32 ttl_;
  ::google::protobuf::int32 retry_;
  ::google::protobuf::int32 max_count_;
  ::std::string* data_;
  static const ::std::string _default_data_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PushQueueRequest* default_instance_;
};
// -------------------------------------------------------------------

class PopQueueRequest : public ::google::protobuf::Message {
 public:
  PopQueueRequest();
  virtual ~PopQueueRequest();
  
  PopQueueRequest(const PopQueueRequest& from);
  
  inline PopQueueRequest& operator=(const PopQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PopQueueRequest& default_instance();
  
  void Swap(PopQueueRequest* other);
  
  // implements Message ----------------------------------------------
  
  PopQueueRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PopQueueRequest& from);
  void MergeFrom(const PopQueueRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 trans_id = 1;
  inline bool has_trans_id() const;
  inline void clear_trans_id();
  static const int kTransIdFieldNumber = 1;
  inline ::google::protobuf::int64 trans_id() const;
  inline void set_trans_id(::google::protobuf::int64 value);
  
  // required string queue = 3;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 3;
  inline const ::std::string& queue() const;
  inline void set_queue(const ::std::string& value);
  inline void set_queue(const char* value);
  inline void set_queue(const char* value, size_t size);
  inline ::std::string* mutable_queue();
  
  // required int32 message_id = 4;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 4;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PopQueueRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 trans_id_;
  ::std::string* queue_;
  static const ::std::string _default_queue_;
  ::google::protobuf::int32 message_id_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PopQueueRequest* default_instance_;
};
// -------------------------------------------------------------------

class SyncQueueRequest : public ::google::protobuf::Message {
 public:
  SyncQueueRequest();
  virtual ~SyncQueueRequest();
  
  SyncQueueRequest(const SyncQueueRequest& from);
  
  inline SyncQueueRequest& operator=(const SyncQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncQueueRequest& default_instance();
  
  void Swap(SyncQueueRequest* other);
  
  // implements Message ----------------------------------------------
  
  SyncQueueRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncQueueRequest& from);
  void MergeFrom(const SyncQueueRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 last_trans_id = 1;
  inline bool has_last_trans_id() const;
  inline void clear_last_trans_id();
  static const int kLastTransIdFieldNumber = 1;
  inline ::google::protobuf::int64 last_trans_id() const;
  inline void set_last_trans_id(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:SyncQueueRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 last_trans_id_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SyncQueueRequest* default_instance_;
};
// -------------------------------------------------------------------

class SyncQueueData : public ::google::protobuf::Message {
 public:
  SyncQueueData();
  virtual ~SyncQueueData();
  
  SyncQueueData(const SyncQueueData& from);
  
  inline SyncQueueData& operator=(const SyncQueueData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncQueueData& default_instance();
  
  void Swap(SyncQueueData* other);
  
  // implements Message ----------------------------------------------
  
  SyncQueueData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncQueueData& from);
  void MergeFrom(const SyncQueueData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 last_trans_id = 8;
  inline bool has_last_trans_id() const;
  inline void clear_last_trans_id();
  static const int kLastTransIdFieldNumber = 8;
  inline ::google::protobuf::int64 last_trans_id() const;
  inline void set_last_trans_id(::google::protobuf::int64 value);
  
  // required int64 trans_id = 1;
  inline bool has_trans_id() const;
  inline void clear_trans_id();
  static const int kTransIdFieldNumber = 1;
  inline ::google::protobuf::int64 trans_id() const;
  inline void set_trans_id(::google::protobuf::int64 value);
  
  // required string queue = 2;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 2;
  inline const ::std::string& queue() const;
  inline void set_queue(const ::std::string& value);
  inline void set_queue(const char* value);
  inline void set_queue(const char* value, size_t size);
  inline ::std::string* mutable_queue();
  
  // required int32 op_type = 3;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 3;
  inline ::google::protobuf::int32 op_type() const;
  inline void set_op_type(::google::protobuf::int32 value);
  
  // required int32 message_id = 4;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 4;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);
  
  // optional int32 delay = 5 [default = 0];
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 5;
  inline ::google::protobuf::int32 delay() const;
  inline void set_delay(::google::protobuf::int32 value);
  
  // optional int32 ttl = 6 [default = 0];
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 6;
  inline ::google::protobuf::int32 ttl() const;
  inline void set_ttl(::google::protobuf::int32 value);
  
  // optional int32 retry = 7 [default = 0];
  inline bool has_retry() const;
  inline void clear_retry();
  static const int kRetryFieldNumber = 7;
  inline ::google::protobuf::int32 retry() const;
  inline void set_retry(::google::protobuf::int32 value);
  
  // optional bytes data = 9;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 9;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  
  // @@protoc_insertion_point(class_scope:SyncQueueData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 last_trans_id_;
  ::google::protobuf::int64 trans_id_;
  ::std::string* queue_;
  static const ::std::string _default_queue_;
  ::google::protobuf::int32 op_type_;
  ::google::protobuf::int32 message_id_;
  ::google::protobuf::int32 delay_;
  ::google::protobuf::int32 ttl_;
  ::google::protobuf::int32 retry_;
  ::std::string* data_;
  static const ::std::string _default_data_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SyncQueueData* default_instance_;
};
// -------------------------------------------------------------------

class ForwardData : public ::google::protobuf::Message {
 public:
  ForwardData();
  virtual ~ForwardData();
  
  ForwardData(const ForwardData& from);
  
  inline ForwardData& operator=(const ForwardData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardData& default_instance();
  
  void Swap(ForwardData* other);
  
  // implements Message ----------------------------------------------
  
  ForwardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardData& from);
  void MergeFrom(const ForwardData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  
  // required bytes source = 2;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 2;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const void* value, size_t size);
  inline ::std::string* mutable_source();
  
  // required int32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ForwardData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* data_;
  static const ::std::string _default_data_;
  ::std::string* source_;
  static const ::std::string _default_source_;
  ::google::protobuf::int32 timestamp_;
  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ForwardData* default_instance_;
};
// ===================================================================


// ===================================================================

// CommonResponse

// optional int32 error_code = 1 [default = 0];
inline bool CommonResponse::has_error_code() const {
  return _has_bit(0);
}
inline void CommonResponse::clear_error_code() {
  error_code_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CommonResponse::error_code() const {
  return error_code_;
}
inline void CommonResponse::set_error_code(::google::protobuf::int32 value) {
  _set_bit(0);
  error_code_ = value;
}

// -------------------------------------------------------------------

// RegisterRequest

// required int32 node_type = 1 [default = 0];
inline bool RegisterRequest::has_node_type() const {
  return _has_bit(0);
}
inline void RegisterRequest::clear_node_type() {
  node_type_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RegisterRequest::node_type() const {
  return node_type_;
}
inline void RegisterRequest::set_node_type(::google::protobuf::int32 value) {
  _set_bit(0);
  node_type_ = value;
}

// required int32 node_id = 2 [default = 0];
inline bool RegisterRequest::has_node_id() const {
  return _has_bit(1);
}
inline void RegisterRequest::clear_node_id() {
  node_id_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 RegisterRequest::node_id() const {
  return node_id_;
}
inline void RegisterRequest::set_node_id(::google::protobuf::int32 value) {
  _set_bit(1);
  node_id_ = value;
}

// -------------------------------------------------------------------

// RegisterResponse

// required int32 error_code = 1 [default = 0];
inline bool RegisterResponse::has_error_code() const {
  return _has_bit(0);
}
inline void RegisterResponse::clear_error_code() {
  error_code_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 RegisterResponse::error_code() const {
  return error_code_;
}
inline void RegisterResponse::set_error_code(::google::protobuf::int32 value) {
  _set_bit(0);
  error_code_ = value;
}

// -------------------------------------------------------------------

// StatusRequest

// -------------------------------------------------------------------

// StatusResponse

// -------------------------------------------------------------------

// ConfigData

// required int32 node_type = 1;
inline bool ConfigData::has_node_type() const {
  return _has_bit(0);
}
inline void ConfigData::clear_node_type() {
  node_type_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 ConfigData::node_type() const {
  return node_type_;
}
inline void ConfigData::set_node_type(::google::protobuf::int32 value) {
  _set_bit(0);
  node_type_ = value;
}

// optional int32 protect_mode = 4 [default = 0];
inline bool ConfigData::has_protect_mode() const {
  return _has_bit(1);
}
inline void ConfigData::clear_protect_mode() {
  protect_mode_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 ConfigData::protect_mode() const {
  return protect_mode_;
}
inline void ConfigData::set_protect_mode(::google::protobuf::int32 value) {
  _set_bit(1);
  protect_mode_ = value;
}

// required string data = 2;
inline bool ConfigData::has_data() const {
  return _has_bit(2);
}
inline void ConfigData::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ConfigData::data() const {
  return *data_;
}
inline void ConfigData::set_data(const ::std::string& value) {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ConfigData::set_data(const char* value) {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ConfigData::set_data(const char* value, size_t size) {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfigData::mutable_data() {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}

// repeated int32 online_node_list = 3;
inline int ConfigData::online_node_list_size() const {
  return online_node_list_.size();
}
inline void ConfigData::clear_online_node_list() {
  online_node_list_.Clear();
}
inline ::google::protobuf::int32 ConfigData::online_node_list(int index) const {
  return online_node_list_.Get(index);
}
inline void ConfigData::set_online_node_list(int index, ::google::protobuf::int32 value) {
  online_node_list_.Set(index, value);
}
inline void ConfigData::add_online_node_list(::google::protobuf::int32 value) {
  online_node_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ConfigData::online_node_list() const {
  return online_node_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ConfigData::mutable_online_node_list() {
  return &online_node_list_;
}

// -------------------------------------------------------------------

// ConfigDataRequest

// repeated int32 node_type_list = 1;
inline int ConfigDataRequest::node_type_list_size() const {
  return node_type_list_.size();
}
inline void ConfigDataRequest::clear_node_type_list() {
  node_type_list_.Clear();
}
inline ::google::protobuf::int32 ConfigDataRequest::node_type_list(int index) const {
  return node_type_list_.Get(index);
}
inline void ConfigDataRequest::set_node_type_list(int index, ::google::protobuf::int32 value) {
  node_type_list_.Set(index, value);
}
inline void ConfigDataRequest::add_node_type_list(::google::protobuf::int32 value) {
  node_type_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ConfigDataRequest::node_type_list() const {
  return node_type_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ConfigDataRequest::mutable_node_type_list() {
  return &node_type_list_;
}

// -------------------------------------------------------------------

// ConfigDataResponse

// required int32 error_code = 1 [default = 0];
inline bool ConfigDataResponse::has_error_code() const {
  return _has_bit(0);
}
inline void ConfigDataResponse::clear_error_code() {
  error_code_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 ConfigDataResponse::error_code() const {
  return error_code_;
}
inline void ConfigDataResponse::set_error_code(::google::protobuf::int32 value) {
  _set_bit(0);
  error_code_ = value;
}

// repeated .ConfigData data_list = 3;
inline int ConfigDataResponse::data_list_size() const {
  return data_list_.size();
}
inline void ConfigDataResponse::clear_data_list() {
  data_list_.Clear();
}
inline const ::ConfigData& ConfigDataResponse::data_list(int index) const {
  return data_list_.Get(index);
}
inline ::ConfigData* ConfigDataResponse::mutable_data_list(int index) {
  return data_list_.Mutable(index);
}
inline ::ConfigData* ConfigDataResponse::add_data_list() {
  return data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigData >&
ConfigDataResponse::data_list() const {
  return data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigData >*
ConfigDataResponse::mutable_data_list() {
  return &data_list_;
}

// -------------------------------------------------------------------

// BroadcastNotify

// repeated int32 uid_list = 1;
inline int BroadcastNotify::uid_list_size() const {
  return uid_list_.size();
}
inline void BroadcastNotify::clear_uid_list() {
  uid_list_.Clear();
}
inline ::google::protobuf::int32 BroadcastNotify::uid_list(int index) const {
  return uid_list_.Get(index);
}
inline void BroadcastNotify::set_uid_list(int index, ::google::protobuf::int32 value) {
  uid_list_.Set(index, value);
}
inline void BroadcastNotify::add_uid_list(::google::protobuf::int32 value) {
  uid_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BroadcastNotify::uid_list() const {
  return uid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BroadcastNotify::mutable_uid_list() {
  return &uid_list_;
}

// optional int32 msg_type = 2 [default = 0];
inline bool BroadcastNotify::has_msg_type() const {
  return _has_bit(1);
}
inline void BroadcastNotify::clear_msg_type() {
  msg_type_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 BroadcastNotify::msg_type() const {
  return msg_type_;
}
inline void BroadcastNotify::set_msg_type(::google::protobuf::int32 value) {
  _set_bit(1);
  msg_type_ = value;
}

// required bytes data = 3;
inline bool BroadcastNotify::has_data() const {
  return _has_bit(2);
}
inline void BroadcastNotify::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& BroadcastNotify::data() const {
  return *data_;
}
inline void BroadcastNotify::set_data(const ::std::string& value) {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void BroadcastNotify::set_data(const char* value) {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void BroadcastNotify::set_data(const void* value, size_t size) {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BroadcastNotify::mutable_data() {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}

// -------------------------------------------------------------------

// VoteData

// optional int32 vote_id = 1 [default = 0];
inline bool VoteData::has_vote_id() const {
  return _has_bit(0);
}
inline void VoteData::clear_vote_id() {
  vote_id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 VoteData::vote_id() const {
  return vote_id_;
}
inline void VoteData::set_vote_id(::google::protobuf::int32 value) {
  _set_bit(0);
  vote_id_ = value;
}

// optional int32 node_id = 2 [default = 0];
inline bool VoteData::has_node_id() const {
  return _has_bit(1);
}
inline void VoteData::clear_node_id() {
  node_id_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 VoteData::node_id() const {
  return node_id_;
}
inline void VoteData::set_node_id(::google::protobuf::int32 value) {
  _set_bit(1);
  node_id_ = value;
}

// optional int64 trans_id = 3 [default = 0];
inline bool VoteData::has_trans_id() const {
  return _has_bit(2);
}
inline void VoteData::clear_trans_id() {
  trans_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 VoteData::trans_id() const {
  return trans_id_;
}
inline void VoteData::set_trans_id(::google::protobuf::int64 value) {
  _set_bit(2);
  trans_id_ = value;
}

// optional int32 port = 4 [default = 0];
inline bool VoteData::has_port() const {
  return _has_bit(3);
}
inline void VoteData::clear_port() {
  port_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 VoteData::port() const {
  return port_;
}
inline void VoteData::set_port(::google::protobuf::int32 value) {
  _set_bit(3);
  port_ = value;
}

// optional string host = 5 [default = ""];
inline bool VoteData::has_host() const {
  return _has_bit(4);
}
inline void VoteData::clear_host() {
  if (host_ != &_default_host_) {
    host_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& VoteData::host() const {
  return *host_;
}
inline void VoteData::set_host(const ::std::string& value) {
  _set_bit(4);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void VoteData::set_host(const char* value) {
  _set_bit(4);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void VoteData::set_host(const char* value, size_t size) {
  _set_bit(4);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VoteData::mutable_host() {
  _set_bit(4);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  return host_;
}

// -------------------------------------------------------------------

// VoteResponse

// required int32 error_code = 1 [default = 0];
inline bool VoteResponse::has_error_code() const {
  return _has_bit(0);
}
inline void VoteResponse::clear_error_code() {
  error_code_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 VoteResponse::error_code() const {
  return error_code_;
}
inline void VoteResponse::set_error_code(::google::protobuf::int32 value) {
  _set_bit(0);
  error_code_ = value;
}

// optional .VoteData data = 2;
inline bool VoteResponse::has_data() const {
  return _has_bit(1);
}
inline void VoteResponse::clear_data() {
  if (data_ != NULL) data_->::VoteData::Clear();
  _clear_bit(1);
}
inline const ::VoteData& VoteResponse::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::VoteData* VoteResponse::mutable_data() {
  _set_bit(1);
  if (data_ == NULL) data_ = new ::VoteData;
  return data_;
}

// -------------------------------------------------------------------

// PushQueueRequest

// required int64 trans_id = 1;
inline bool PushQueueRequest::has_trans_id() const {
  return _has_bit(0);
}
inline void PushQueueRequest::clear_trans_id() {
  trans_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 PushQueueRequest::trans_id() const {
  return trans_id_;
}
inline void PushQueueRequest::set_trans_id(::google::protobuf::int64 value) {
  _set_bit(0);
  trans_id_ = value;
}

// required string queue = 2;
inline bool PushQueueRequest::has_queue() const {
  return _has_bit(1);
}
inline void PushQueueRequest::clear_queue() {
  if (queue_ != &_default_queue_) {
    queue_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PushQueueRequest::queue() const {
  return *queue_;
}
inline void PushQueueRequest::set_queue(const ::std::string& value) {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void PushQueueRequest::set_queue(const char* value) {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void PushQueueRequest::set_queue(const char* value, size_t size) {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushQueueRequest::mutable_queue() {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  return queue_;
}

// required int32 message_id = 3;
inline bool PushQueueRequest::has_message_id() const {
  return _has_bit(2);
}
inline void PushQueueRequest::clear_message_id() {
  message_id_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 PushQueueRequest::message_id() const {
  return message_id_;
}
inline void PushQueueRequest::set_message_id(::google::protobuf::int32 value) {
  _set_bit(2);
  message_id_ = value;
}

// optional int32 delay = 4 [default = 0];
inline bool PushQueueRequest::has_delay() const {
  return _has_bit(3);
}
inline void PushQueueRequest::clear_delay() {
  delay_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 PushQueueRequest::delay() const {
  return delay_;
}
inline void PushQueueRequest::set_delay(::google::protobuf::int32 value) {
  _set_bit(3);
  delay_ = value;
}

// optional int32 ttl = 5 [default = 0];
inline bool PushQueueRequest::has_ttl() const {
  return _has_bit(4);
}
inline void PushQueueRequest::clear_ttl() {
  ttl_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 PushQueueRequest::ttl() const {
  return ttl_;
}
inline void PushQueueRequest::set_ttl(::google::protobuf::int32 value) {
  _set_bit(4);
  ttl_ = value;
}

// optional int32 retry = 6 [default = 0];
inline bool PushQueueRequest::has_retry() const {
  return _has_bit(5);
}
inline void PushQueueRequest::clear_retry() {
  retry_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 PushQueueRequest::retry() const {
  return retry_;
}
inline void PushQueueRequest::set_retry(::google::protobuf::int32 value) {
  _set_bit(5);
  retry_ = value;
}

// optional int32 max_count = 7 [default = 0];
inline bool PushQueueRequest::has_max_count() const {
  return _has_bit(6);
}
inline void PushQueueRequest::clear_max_count() {
  max_count_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 PushQueueRequest::max_count() const {
  return max_count_;
}
inline void PushQueueRequest::set_max_count(::google::protobuf::int32 value) {
  _set_bit(6);
  max_count_ = value;
}

// required bytes data = 8;
inline bool PushQueueRequest::has_data() const {
  return _has_bit(7);
}
inline void PushQueueRequest::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& PushQueueRequest::data() const {
  return *data_;
}
inline void PushQueueRequest::set_data(const ::std::string& value) {
  _set_bit(7);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PushQueueRequest::set_data(const char* value) {
  _set_bit(7);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PushQueueRequest::set_data(const void* value, size_t size) {
  _set_bit(7);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PushQueueRequest::mutable_data() {
  _set_bit(7);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}

// -------------------------------------------------------------------

// PopQueueRequest

// required int64 trans_id = 1;
inline bool PopQueueRequest::has_trans_id() const {
  return _has_bit(0);
}
inline void PopQueueRequest::clear_trans_id() {
  trans_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 PopQueueRequest::trans_id() const {
  return trans_id_;
}
inline void PopQueueRequest::set_trans_id(::google::protobuf::int64 value) {
  _set_bit(0);
  trans_id_ = value;
}

// required string queue = 3;
inline bool PopQueueRequest::has_queue() const {
  return _has_bit(1);
}
inline void PopQueueRequest::clear_queue() {
  if (queue_ != &_default_queue_) {
    queue_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PopQueueRequest::queue() const {
  return *queue_;
}
inline void PopQueueRequest::set_queue(const ::std::string& value) {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void PopQueueRequest::set_queue(const char* value) {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void PopQueueRequest::set_queue(const char* value, size_t size) {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PopQueueRequest::mutable_queue() {
  _set_bit(1);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  return queue_;
}

// required int32 message_id = 4;
inline bool PopQueueRequest::has_message_id() const {
  return _has_bit(2);
}
inline void PopQueueRequest::clear_message_id() {
  message_id_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 PopQueueRequest::message_id() const {
  return message_id_;
}
inline void PopQueueRequest::set_message_id(::google::protobuf::int32 value) {
  _set_bit(2);
  message_id_ = value;
}

// -------------------------------------------------------------------

// SyncQueueRequest

// required int64 last_trans_id = 1;
inline bool SyncQueueRequest::has_last_trans_id() const {
  return _has_bit(0);
}
inline void SyncQueueRequest::clear_last_trans_id() {
  last_trans_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 SyncQueueRequest::last_trans_id() const {
  return last_trans_id_;
}
inline void SyncQueueRequest::set_last_trans_id(::google::protobuf::int64 value) {
  _set_bit(0);
  last_trans_id_ = value;
}

// -------------------------------------------------------------------

// SyncQueueData

// required int64 last_trans_id = 8;
inline bool SyncQueueData::has_last_trans_id() const {
  return _has_bit(0);
}
inline void SyncQueueData::clear_last_trans_id() {
  last_trans_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 SyncQueueData::last_trans_id() const {
  return last_trans_id_;
}
inline void SyncQueueData::set_last_trans_id(::google::protobuf::int64 value) {
  _set_bit(0);
  last_trans_id_ = value;
}

// required int64 trans_id = 1;
inline bool SyncQueueData::has_trans_id() const {
  return _has_bit(1);
}
inline void SyncQueueData::clear_trans_id() {
  trans_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 SyncQueueData::trans_id() const {
  return trans_id_;
}
inline void SyncQueueData::set_trans_id(::google::protobuf::int64 value) {
  _set_bit(1);
  trans_id_ = value;
}

// required string queue = 2;
inline bool SyncQueueData::has_queue() const {
  return _has_bit(2);
}
inline void SyncQueueData::clear_queue() {
  if (queue_ != &_default_queue_) {
    queue_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SyncQueueData::queue() const {
  return *queue_;
}
inline void SyncQueueData::set_queue(const ::std::string& value) {
  _set_bit(2);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void SyncQueueData::set_queue(const char* value) {
  _set_bit(2);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void SyncQueueData::set_queue(const char* value, size_t size) {
  _set_bit(2);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  queue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncQueueData::mutable_queue() {
  _set_bit(2);
  if (queue_ == &_default_queue_) {
    queue_ = new ::std::string;
  }
  return queue_;
}

// required int32 op_type = 3;
inline bool SyncQueueData::has_op_type() const {
  return _has_bit(3);
}
inline void SyncQueueData::clear_op_type() {
  op_type_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 SyncQueueData::op_type() const {
  return op_type_;
}
inline void SyncQueueData::set_op_type(::google::protobuf::int32 value) {
  _set_bit(3);
  op_type_ = value;
}

// required int32 message_id = 4;
inline bool SyncQueueData::has_message_id() const {
  return _has_bit(4);
}
inline void SyncQueueData::clear_message_id() {
  message_id_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 SyncQueueData::message_id() const {
  return message_id_;
}
inline void SyncQueueData::set_message_id(::google::protobuf::int32 value) {
  _set_bit(4);
  message_id_ = value;
}

// optional int32 delay = 5 [default = 0];
inline bool SyncQueueData::has_delay() const {
  return _has_bit(5);
}
inline void SyncQueueData::clear_delay() {
  delay_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 SyncQueueData::delay() const {
  return delay_;
}
inline void SyncQueueData::set_delay(::google::protobuf::int32 value) {
  _set_bit(5);
  delay_ = value;
}

// optional int32 ttl = 6 [default = 0];
inline bool SyncQueueData::has_ttl() const {
  return _has_bit(6);
}
inline void SyncQueueData::clear_ttl() {
  ttl_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 SyncQueueData::ttl() const {
  return ttl_;
}
inline void SyncQueueData::set_ttl(::google::protobuf::int32 value) {
  _set_bit(6);
  ttl_ = value;
}

// optional int32 retry = 7 [default = 0];
inline bool SyncQueueData::has_retry() const {
  return _has_bit(7);
}
inline void SyncQueueData::clear_retry() {
  retry_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 SyncQueueData::retry() const {
  return retry_;
}
inline void SyncQueueData::set_retry(::google::protobuf::int32 value) {
  _set_bit(7);
  retry_ = value;
}

// optional bytes data = 9;
inline bool SyncQueueData::has_data() const {
  return _has_bit(8);
}
inline void SyncQueueData::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& SyncQueueData::data() const {
  return *data_;
}
inline void SyncQueueData::set_data(const ::std::string& value) {
  _set_bit(8);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void SyncQueueData::set_data(const char* value) {
  _set_bit(8);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void SyncQueueData::set_data(const void* value, size_t size) {
  _set_bit(8);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncQueueData::mutable_data() {
  _set_bit(8);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}

// -------------------------------------------------------------------

// ForwardData

// required bytes data = 1;
inline bool ForwardData::has_data() const {
  return _has_bit(0);
}
inline void ForwardData::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ForwardData::data() const {
  return *data_;
}
inline void ForwardData::set_data(const ::std::string& value) {
  _set_bit(0);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ForwardData::set_data(const char* value) {
  _set_bit(0);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ForwardData::set_data(const void* value, size_t size) {
  _set_bit(0);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForwardData::mutable_data() {
  _set_bit(0);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}

// required bytes source = 2;
inline bool ForwardData::has_source() const {
  return _has_bit(1);
}
inline void ForwardData::clear_source() {
  if (source_ != &_default_source_) {
    source_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ForwardData::source() const {
  return *source_;
}
inline void ForwardData::set_source(const ::std::string& value) {
  _set_bit(1);
  if (source_ == &_default_source_) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void ForwardData::set_source(const char* value) {
  _set_bit(1);
  if (source_ == &_default_source_) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void ForwardData::set_source(const void* value, size_t size) {
  _set_bit(1);
  if (source_ == &_default_source_) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForwardData::mutable_source() {
  _set_bit(1);
  if (source_ == &_default_source_) {
    source_ = new ::std::string;
  }
  return source_;
}

// required int32 timestamp = 3;
inline bool ForwardData::has_timestamp() const {
  return _has_bit(2);
}
inline void ForwardData::clear_timestamp() {
  timestamp_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 ForwardData::timestamp() const {
  return timestamp_;
}
inline void ForwardData::set_timestamp(::google::protobuf::int32 value) {
  _set_bit(2);
  timestamp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< SystemMessageType>() {
  return SystemMessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< SystemErrorType>() {
  return SystemErrorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_2eproto__INCLUDED
